<?xml version="1.0" encoding="UTF-8"?>
<!--
/*
 *                  Aozan development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU General Public License version 3 or later
 * and CeCILL. This should be distributed with the code. If you
 * do not have a copy, see:
 *
 *      http://www.gnu.org/licenses/gpl-3.0-standalone.html
 *      http://www.cecill.info/licences/Licence_CeCILL_V2-en.html
 *
 * Copyright for this code is held jointly by the Genomic platform
 * of the Institut de Biologie de l'École Normale Supérieure and
 * the individual authors. These should be listed in @author doc
 * comments.
 *
 * For more information on the Aozan project and its aims,
 * or to join the Aozan Google group, visit the home page at:
 *
 *      http://outils.genomique.biologie.ens.fr/aozan
 *
 */
-->
<document>

	<properties>
		<title>Quickstart</title>
		<author email="jourdren@biologie.ens.fr">
			Laurent Jourdren
		</author>

	</properties>


	<body>
	        <link rel="alternate" type="application/rss+xml" title="Aozan updates" href="aozan.rss" />

		<section name="Quickstart Guide">
			<ul>
				<li>
					<a href="#introduction">Introduction</a>
				</li>
				<li>
					<a href="#principles">Principles</a>
				</li>
				<li>
					<a href="#requirements">Requirements</a>
				</li>
                    <ul>
	                      <li><a href="#bcl2fastq">Installing bcl2fastq</a></li>
	                      <li><a href="#bcl2fastq2">Installing bcl2fastq2</a></li>
	                      <li><a href="#docker">Installing docker (optional)</a></li>
	                      <li><a href="#blastall">Installing ncbi-blast+ (optional)</a></li>
                    </ul>
	            <li>
					<a href="#installation">Installation</a>
				</li>
				<li>
					<a href="#launchingAozan">Launching Aozan</a>
				</li>
				<li>
					<a href="#hiseqdata">Accessing HiSeq Data</a>
				</li>
				<li>
					<a href="#directoryAozan">Directories required by Aozan</a>
				</li>
                <li>
                	<a href="#configuration">General configuration</a>
                </li>
                <li>
                	<a href="#steps">Steps</a>
                </li>
			</ul>

		</section>

		<a name="introduction"/>
		<section name="Introduction">

		  <p>Aozan is a tool that automatically handle Illumina HiSeq or NextSeq generated data from the end of sequencing to the
		  demultiplexing while also performing quality control. One of the greatest strength of Aozan is that it doesn't require user action to process data.
		  </p>
		  <p>Each step of the post-sequencing data processing is rather easy to do. However,
		  the duration of each step (data transfer, demultiplexing and quality control) is quite long and before getting data ready to analysis,
		  user must watch the end of each step to avoid waste of time.
		  Executing these tasks after each sequencing process is a laborious job. Aozan allows to
		  save time by automate all these tasks. In addition, Aozan provide a Bcl2fastq CSV samplesheet generator
		  from an XLS or XLSX file to avoid common syntax errors in the CSV file and to allow usage of alias for the index
		  sequences. This tool is available <a href="http://outils.genomique.biologie.ens.fr/samplesheetvalidator/">here</a>.
		  </p>
		</section>

		<a name="principles"/>
 <section name="Principles">

   <p>Aozan is not an interactive tool, it communicates with users through mails. It is launched regularly (usually every hour)
   through a cron job. There are 5 steps in Aozan. Once the end of a run has been discovered, synchronization,
   demultiplexing and quality control will be automatically executed. However, if the end of another run is
   discovered at the end of this last 3 steps, the synchronization of the new run will be launched before resuming
   the end of the analysis of the previous run.</p>

   <p>The 6 native steps of Aozan are:</p>
   <ol>
     <li><a href="new-run-discovering.html">New run discovering step</a></li>
     <li><a href="end-run-discovering.html">End run discovering step</a></li>
     <li><a href="synchronization.html">Synchronization step</a></li>
     <li><a href="demultiplexing.html">Demultiplexing step</a></li>
     <li><a href="recompression.html">Recompression step</a></li>
     <li><a href="quality-control.html">Quality control step</a></li>
   </ol>
 </section>

 <a name="requirements"/>
 <section name="Requirements">


 <p>To run Aozan, you need to install the following software:</p>
 <ul>
   <li>Java 7 or above (tested with Oracle JRE and OpenJDK)</li>
   <li>Docker 1.7.1 or above, for demultiplexing step or launching Aozan</li>
   <li>bcl2fastq 1.8.2 or above</li>
   <li>bcl2fastq 2, in preference to version 2.17.1.14</li>
   <li>rsync 3.0.x or later</li>
 </ul>

 <p>On Ubuntu, you can install requirements (except Bcl2fastq) using the 'apt-get' command, here is an example:</p>
<source>
$ sudo apt-get install openjdk-7-jre-headless rsync
</source>


  <a name="bcl2fastq"/>
   <subsection name="Installing bcl2fastq">
   <p>The Bcl2FastQ conversion software is a tool which handle bcl conversion and demultiplexing of both unzipped and zipped bcl files.
    bcl2fastq can be downloaded on the Illumina website
 <a href="http://support.illumina.com/downloads/bcl2fastq_conversion_software_183.ilmn">here</a>.</p>

 <p>Next, using the following lines we try to download and install bcl2fastq 1.8.3. , but since the installation on ubuntu has failed,
    we have to recompile bcl2fastq in static mode on Centos 5.9, before finalizing installation. You can download 
 <a href="http://centos.mirror.fr.planethoster.net/5/isos/x86_64/">Centos 5.9 image iso here</a>.</p>

 <source>
# Download bcl2fastq 1.8.3
$ wget support.illumina.com/documents/MyIllumina/ce203f99-aad6-449e-938c-daa7501089a4/bcl2fastq-1.8.3-Linux-x86_64.rpm

# Install runtime and compilation depenencies
$ yum install make perl libxml2-devel libxml2 libxslt libxslt-devel gcc gcc-c++ bzip2 bzip2-devel zlib zlib-devel

# Launch static compilation
$ tar -xjf bcl2fastq-1.8.3.tar.bz2
$ mkdir BclToFast-build
$ cd BclToFastq-build
$ ../BclToFastq/src/configure --static --prefix=/usr/local/bcl2fastq-1.8.3
$ make
$ su
$ make install

# Launch installation
$ tar -cvjf /usr/local/bcl2fastq-1.8.3.tar.bz2 bcl2fastq-1.8.3/
</source>

<h4>Patching bcl2fastq to allow bzip2 compression of fastq files</h4>

    <p>To enable bzip2 compression in bcl2fastq 1.8.3, you need to comment with a '<tt>#</tt>' the next lines in
      the  <tt>/usr/local/bcl2fastq-1.8.3/share/bcl2fastq-1.8.3/makefiles/Config.mk</tt>:</p>
		<source>
COMPRESSION:=gzip
COMPRESSIONSUFFIX:=.gz
		</source>

 </subsection>
 
<a name="bcl2fastq2"/>
<subsection name="Installing bcl2fastq2">
	<p>Since September 2014, Illmunina published a new version on bcl2fastq software, compatible with RTA version 2 (Real Time Analysis)
		used on NextSeq 500 sequencer. This version is easier to install.</p>
<source> 
$ cd /tmp 
$ wget --no-check-certificate https://support.illumina.com/content/dam/illumina-support/documents/downloads/software/bcl2fastq/bcl2fastq2-v2.17.1.14-Linux-x86_64.rpm

# Install
$ yum -y --nogpgcheck localinstall /tmp/bcl2fastq2-*.rpm

# Patch a punctual error to search css file for create the final report html 
$ cd /usr/local/bin 
$ ln -s ../share/
			
# Install requiered dependencies
$ yum install -y zip.x86_64
</source>
</subsection>
   	
<a name="docker"/>
<subsection name="Installing docker">
	<p>Now with Aozan, you can launch demultiplexing step with a Docker image on bcl2fastq from repository of the platform here. 
		<a href="https://hub.docker.com/u/genomicpariscentre/">
			<img src="images/logo_docker.png" alt="link to the platform repository Docker" border="1" /></a>
		Installation using Docker: <a href="https://docs.docker.com/installation/">look at Docker documentation web site</a> 
		</p>
</subsection>
   	
   	<a name="ncbi-blast+"/>
 <subsection name="Installing ncbi-blast+, optional for quality control">

 <p>To installing ncbi-blast+ (or blastall) on your system (Ubuntu or centos), use the following command line: </p>
	<source>$ sudo apt-get install ncbi-blast+</source>
  <p>Now download the required &quot;nt&quot; database from NCBI : </p>
	<source>
$ ftp ftp.ncbi.nlm.nih.gov
login anonymous
pwd
$ cd blast/db
$ bin
$ prompt
$ mget nt*
	</source>
	  <p>Unzip all files, the first nt.00.tar.gz contains the file nt.nal.</p>
	  <p>Use the perl script to update the database, you can consult <a href="http://www.ncbi.nlm.nih.gov/books/NBK1762/" target="_blank">the NCBI documentation.</a></p>
	  <p>Like Aozan version 1.2, it is still possible to use blastall.</p>
	 </subsection>
   </section>


  <a name="installation"/>
  <section name="Installation">

 <p>The installation of Aozan is very easy, you just had to uncompress the archive:</p>

<source>
$ tar xzf aozan-@@@VERSION@@@.tar.gz
</source>

 <p>Aozan is written in Python and Java. It uses the Java implementation of Python (Jython) that
 is bundled in Aozan.</p>

  </section>

  <a name="launchingAozan"/>
  <section name="Launching Aozan">

 <p>Aozan is usually launched regularly as a cron job. However, Aozan can also be launched manually.
   In the following examples, Aozan is installed in <tt>/usr/local/aozan</tt> and the configuration file is
     <tt>/etc/aozan.conf</tt>.
    Note that it is better to configure your aozan.conf file before running Aozan.</p>
    <p>The configuration file is a text file, the parameters corresponds at key-value pairs.
    See the <a href="steps.html">pages about steps</a> for more details.</p>

 <subsection name="Launching Aozan manually">

 <p>In this case, we can launch Aozan with the following command:</p>

<source>
$ /usr/local/aozan/aozan.sh /etc/aozan.conf
</source>

  </subsection>

 <a name="aozan_cron_job"/>
 <subsection name="Launching Aozan as cron job">

 <p>In the following lines, we configure our system to launch Aozan every hour using a script in
   <tt>/etc/cron.daily</tt> (on a Debian/Ubuntu GNU/Linux distribution).</p>

 <source>
#!/bin/bash

# User to use to launch Aozan
AOZAN_USER=nobody

# Path to Aozan base directory
AOZAN_DIR=/usr/local/aozan

# Path to Aozan configuration
AOZAN_CONF=/etc/aozan.conf

su $AOZAN_USER -c "$AOZAN_DIR/aozan.sh --quiet $AOZAN_CONF"
</source>

 <p>The <tt>--quiet</tt> option avoid displaying message if another Aozan instance is currently running.</p>

 <p>Then we set the permission on the Aozan cron script:</p>

<source>
$ sudo chmod 755 /etc/cron/daily/aozan &amp;&amp; sudo chmod root:root /etc/cron/daily/aozan
</source>

  </subsection>
</section>

  <a name="hiseqdata"/>
 <section name="Accessing HiSeq Data">

 <p>Aozan can handle several HiSeq instruments. For each instruments you must allow Aozan computer
 to have access to HiSeq output directories. On HiSeq 2000/2500, 2 hard drives are dedicated to each flow cell slot.
   So you must share each hard drive with Aozan computer.</p>

 <p>You can also choose to force HiSeq to directly write its data on a network storage like a NAS. In this
    case you must mount this network storage (using preferably an Unix network file system like NFS) on
    the computer where Aozan is installed.</p>

 <subsection name="Enable sharing on HiSeq computer">

 <p>First on the HiSeq computer, share the hard drive that contains generated data (usualy F: and G:).
 To do this, open the explorer and right-click on each Hard drive, share... The shares can be in read
   only mode (recommended).</p>

 <p><b>Security issues:</b> we recommend to shares HiSeq output directories in read only mode and
   restrict the shares access to Aozan computer. To do this, you can configure the Windows firewall.</p>

 </subsection>

 <subsection name="Mount Windows shares on linux">

 <ul>
   <li>First install the tools for mounting Windows shares (CIFS):</li>
<source>
$ sudo apt-get install cifs-utils smbclient
</source>

 <li>Then, test if you can connect to the share:</li>
<source>
$ smbclient -U sbsuser 'smb://hiseq01.example.com/F$'
</source>

 <li>And now you can add the following lines in /etc/fstab:</li>
<source>
//hiseq01.example.com/F$   /mnt/hiseq01_f    cifs    username=sbsuser,password=hiseqpassword       0       0
//hiseq01.example.com/G$   /mnt/hiseq01_g    cifs    username=sbsuser,password=hiseqpassword       0       0
</source>

 <li>Now create the mount points and process the mounting of the shares:</li>
<source>
$ sudo mkdir -p /mnt/hiseq01_f /mnt/hiseq01_g &amp;&amp; \
   sudo mount /mnt/hiseq01_f &amp;&amp; \
   sudo mount /mnt/hiseq01_g
</source>
 </ul>
 <p>You can also use autofs to mount the share.</p>

  </subsection>

 </section>



<a name="directoryAozan"/>
 <section name="Directories requiered by Aozan">

 <p>To work, Aozan needs the following directories. The path of these directories must be set in the Aozan
 configuration file.</p>
 <p>An example of aozan configuration file is <a href="./data/aozan-example.conf" target="_blank">here.</a></p>

 <table>
   <tr><th>Aozan property</th><th>Sample value</th><th>description</th></tr>
   <tr><td>aozan.var.path (*)</td><td>/var/lib/aozan</td><td>Aozan internal data directory. It contains
     log files and history of processed runs</td></tr>
   <tr><td>aozan.log.path</td><td>/var/log/aozan</td><td>Path to the Aozan log files</td></tr>
   <tr><td>hiseq.data.path</td><td>/mnt/hiseq01_f:/mnt/hiseq01_g</td><td>Hiseq output directories.
     Multiple values are allowed if there is several HiSeq or 2 output directories for each flow cell of
     an HiSeq 2000 (paths separated by ':')</td></tr>
   <tr><td>bcl.data.path</td><td>/mnt/storage/bcl</td><td>Hiseq output data after synchronization. Usualy cif files
     are not copied in this directory</td></tr>
   <tr><td>fastq.data.path</td><td>/mnt/storage/fastq</td><td>Directory for the output of
     demultiplexing with Bcl2fastq</td></tr>
   <tr><td>reports.data.path</td><td>/mnt/storage/reports</td><td>Directory for the qc report</td></tr>
   <tr><td>bcl2fastq.samplesheet.path</td><td>/mnt/storage/samplesheet</td><td>Directory with Bcl2fastq sample sheets (with files
	 like <tt>samplesheet_INSTRUMENT-SN_RUN-NUMBER$runId.xls</tt> where INSTRUMENT-SN is the instrument serial number and RUN-NUMBER
	 is the run number, e.g. <tt>samplesheet_SNL125_0067.xls</tt>)
     for demultiplexing. If a custom script is used to generate CSV samplesheet files, this directory will no be used.</td></tr>
   <tr><td>tmp.path</td><td>/tmp</td><td>Temporary directory</td></tr>
 </table>

	<p>(*) The directory specified in field aozan.var.path contains the following files.
	Aozan allows to process several runs at the same time. At the end of a step, it adds the run id of that run that has been processed in the step log file.
		<ul>
			<li><b>first_base_report.done</b> : list of the run ids processed by the first base report step;</li>
			<li><b>hiseq.done</b> : list of the run ids processed by the end run discovering step;</li>
			<li><b>hiseq.deny</b> : list of the run ids for not to process (in this file, manual entry);</li>
			<li><b>sync.done</b> : list of the run ids processed by the synchronization step;</li>
			<li><b>recompress.done</b> : list of the run ids processed by the recompression step;</li>
			<li><b>demux.done</b> : list of the run ids processed by the demuliplexing step;</li>
			<li><b>qc.done</b> : list of the run ids processed by the quality control step;</li>
		</ul>
		The following files can also be created to set priority or disable specific runs.
		<ul>
			<li><b>runs.priority</b> : list of the run ids processed in priority by aozan when available;</li>
			<li><b>[step].deny</b> : list of the run ids that won't be processed by a step;</li>
		</ul>
	</p>

</section>

  <a name="configuration"/>
 <section name="Aozan general configuration">

 <p>This section describe the Aozan global configuration settings. For the steps settings,
 	check in the <a href="steps.html">steps documentation.</a></p>
 <p>An example of aozan configuration file is <a href="./data/aozan-example.conf" target="_blank">here.</a></p>

   <subsection name="General configuration">

     <table>
	   <tr><th>Aozan property</th><th>Type</th><th>Default value</th><th>description</th></tr>
	   <tr><td>include</td><td>string</td><td>No set</td><td>Load the configuration entries from another configuration file path. The values
	   loaded from this new configuration file override existing values.</td></tr>
	   <tr><td>aozan.enable</td><td>boolean</td><td>False</td><td>Enable Aozan</td></tr>
	   <tr><td>aozan.log.level</td><td>string</td><td>INFO</td><td>Log level (ALL, FINEST, FINER, FINE, CONFIG, INFO, WARNING, SEVERE, OFF)</td></tr>
	   <tr><td>aozan.debug</td><td>boolean</td><td>False</td><td>mode debug</td></tr>
	   <tr><td>lock.file</td><td>string</td><td>/var/lock/aozan.lock</td><td>Aozan lock file that prevent
	     two instances of Aozan running at the same time</td></tr>
	   <tr><td>index.html.template</td><td>string</td><td>Not set</td><td>HTML page template that
	     describe a run. If not set, the default template in aozan jar file will be used</td></tr>
	   <tr><td>reports.url</td><td>string</td><td>Not set</td><td>Run reports URL</td></tr>
	   <tr><td>hiseq.critical.min.space</td><td>integer</td><td>1099511627776</td><td>Threshold before sending
	     a email at each Aozan start if not enough space is available on HiSeq output disk, the value corresponds 1 Tb in bytes</td></tr>

	 </table>

   </subsection>

   <subsection name="Mail configuration">

     <p>Email is the only mean for Aozan to inform users. This section show how to configure Aozan email sending.</p>

       <table>
	     <tr><th>Aozan property</th><th>Type</th><th>Default value</th><th>description</th></tr>
	     <tr><td>send.mail</td><td>boolean</td><td>False</td><td>Enable sending email</td></tr>
	     <tr><td>smtp.server</td><td>string</td><td>Not set</td><td>SMTP server address</td></tr>
	     <tr><td>mail.from</td><td>string</td><td>Not set</td><td>Email of the sender</td></tr>
	     <tr><td>mail.to</td><td>string</td><td>Not set</td><td>Email recipient</td></tr>
	     <tr><td>mail.error.to</td><td>string</td><td>Not set</td><td>Email recipient when an error occurs during Aozan</td></tr>
	     <tr><td>mail.header</td><td>string</td><td>THIS IS AN AUTOMATED MESSAGE.\n\n</td><td>Email header</td></tr>
	     <tr><td>mail.footer</td><td>string</td><td>\n\nThe Aozan team.\n</td><td>Email footer</td></tr>
       </table>

   </subsection>

    <subsection name="Illumina HiSeq configuration">
	    <p>In the latest versions of HSC (HSC-2.x.x), <tt>Status_Files/</tt> and <tt>reports/</tt> directories in <tt>Basecalls/Data</tt> are no more created by default.
	    This files are useful to display run statistics of working run without requiring SAV.</p>
	    <p>You can force the creation of the directories by editing the <tt>C:\Illumina\RTA\Configs\HiSeq.Configuration.xml</tt> file and adding the following line :
		<tt>&lt;SaveHtmReportFiles&gt;true&lt;/SaveHtmReportFiles&gt;</tt>. This can be added at the first level, within the <tt>&lt;RTAConfiguration&gt;</tt> tags.
	</p>
	</subsection>

 </section>

   <a name="steps"/>
 <section name="Steps">

   <p>The quality control step is the longest step, it can last several days.
   If Aozan is stopped before the end, it is possible to relaunch it. Restore points allow get back at the last sample processed.
   The intermediary data are saved in the quality control directory in files with the extension <tt>&quot;.data&quot;</tt>.
   </p>

   <ul>
     <li><a href="new-run-discovering.html">New run discovering step</a></li>
     <li><a href="end-run-discovering.html">End run discovering step</a></li>
     <li><a href="synchronization.html">Synchronization step</a></li>
     <li><a href="demultiplexing.html">Demultiplexing step</a></li>
     <li><a href="recompression.html">Recompression step</a></li>
     <li><a href="quality-control.html">Quality control step</a></li>
   </ul>

   <p>An example of email sent to the end of Aozan with the quality control summary as attachment.</p>
   <div align="center">
   	 <img src="images/mail_end_qc_450px.png" alt="example of mail sent at the end on quality control" border="1"/>
   </div>

 </section>

	</body>
</document>
