<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/*
 *                  Eoulsan development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public License version 2.1 or
 * later and CeCILL-C. This should be distributed with the code.
 * If you do not have a copy, see:
 *
 *      http://www.gnu.org/licenses/lgpl-2.1.txt
 *      http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt
 *
 * Copyright for this code is held jointly by the Genomic platform
 * of the Institut de Biologie de l'École Normale Supérieure and
 * the individual authors. These should be listed in @author doc
 * comments.
 *
 * For more information on the Eoulsan project and its aims,
 * or to join the Eoulsan Google group, visit the home page
 * at:
 *
 *      http://www.transcriptome.ens.fr/eoulsan
 *
 */
-->
<document>

	<properties>
		<title>Quickstart</title>
		<author email="jourdren@biologie.ens.fr">
			Laurent Jourdren
		</author>
		
	</properties>
		

	<body>
	        <link rel="alternate" type="application/rss+xml" title="Eoulsan updates" href="aozan.rss" />

		<section name="Introduction">

		  <p>Aozan is tool that automatically handle Illumina HiSeq generated data from the end of sequencing to the 
		  demultiplexing and quality control. The great strength  of Aozan is to not require user to process data. 
		  </p>
		  <p>Each step of the post-sequencing data processing is quite easy to done. However 
		  the duration of the steps (data transfert, demultiplexing and quality control) is quite long and
		  users must watch the end of each step to avoid loose time before getting data ready to analysis.
		  Executing this tasks at the end of each sequencing is a quite off-putting job. Using Aozan allow to
		  save time by automate all this tasks. In addition Aozan provide a CASAVA CSV sample sheet generator
		  from an XLS file that avoid common syntax errors in the CSV file and allow usage of alias for the index 
		  sequences.
		  </p>
		</section>

 <section name="Principles">
   
   <p>Aozan is not an interactive tool, it communicate with users through emails. It is launched regulary (usually every hour) 
   through a cron job. There are 5 steps in Aozan, once the end of a run has been discovered, synchronization, 
   demultiplexing and quality control will be automatically executed. However if the end of another run is 
   discovered at the end of this last 3 steps, the synchronization of the new run will be launched before resuming
   the end of the analysis of the previous run.</p>
   
   <p>The 5 steps of Aozan are:</p>
   <ul>
     <li>First base report sending</li>
     <li>End run discovering</li>
     <li>Synchronization</li>
     <li>Demultiplexing</li>
     <li>Quality control</li>
   </ul>  
   
 </section>

 <section name="Requierements">


 <p>To run Aozan, you need to install the following software:</p>
 <ul>
   <li>Java 6 or above (tested with Oracle JRE or OpenJDK)</li>
   <li>Casava 1.8.2 or above</li>
   <li>rsync 3.0.x or later</li>
 </ul>
 
 <p>On ubuntu, you can install requirements (except CASAVA) with the following command:</p>
 <pre>
$ sudo apt-get install openjdk-6-jre-headless rsync
 </pre>
  
 <subsection name="Installing CASAVA">

 <p>CASAVA can be downloaded on the Illumina website 
 <a href="http://support.illumina.com/sequencing/sequencing_software/casava/downloads.ilmn">here</a>.</p>

 <p>Next, we download and install CASAVA 1.8.2 with the following lines:</p>
 
 <pre>
# Download CASAVA 1.8.2
$ wget https://my.illumina.com/download/summary/Wr-sNFYJn0GHBVp759vFtw

# Install runtime and compilation depenencies
$ sudo apt-get install alien cmake libboost-all-dev libxml2-dev libz-dev libbz2-dev libncurses5-dev libxml-simple-perl xsltproc gnuplot

# Launch compilation and installation
$ VERSION=1.8.2 &amp;&amp; \
  tar xjf CASAVA_v$VERSION.tar.bz2 &amp;&amp; \
  mkdir CASAVA_v$VERSION-build &amp;&amp; \
  cd CASAVA_v$VERSION-build &amp;&amp; \
  ../CASAVA_v$VERSION/src/configure \
    --prefix=/usr/local/casava-$VERSION \
    --with-cmake=/usr/bin/cmake &amp;&amp; \
  sudo make install

# Remove CASAVA examples (not mandatory, save lot of space on the system)
$ sudo rm -rf /usr/local/casava-$VERSION/share/CASAVA-$VERSION/examples 
 </pre>
   
 </subsection>
 
  <subsection name="Patching Casava to allow bzip2 compression of fastq files">
    
    <p>To enable bzip2 compression in CASAVA 1.8, you need to comment with a '<tt>#</tt>' the next lines in
      the  <tt>/usr/local/casava/share/CASAVA-1.8.2/makefiles/Config.mk</tt>:</p>
<pre>
COMPRESSION:=gzip
COMPRESSIONSUFFIX:=.gz
</pre>    

  </subsection>
  
  </section>
  
  
  <section name="Installation">

 <p>The installation of Aozan is very easy, you just had to uncompress the archive:</p>

<pre>
$ tar xzf aozan-@@@VERSION@@@.tar.gz
</pre>

 <p>Aozan is written in Python and Java. It use the Java implementation of Python (Jython) that 
 is bundled in Aozan.</p>

  </section>
  <section name="Launching Aozan">

 <p>Aozan is usually launched regulary as a cron job however Aozan can also be launched manually.
   In the following examples, Aozan is installed in <tt>/usr/local/aozan</tt> and the configuration file is 
     <tt>/etc/aozan.conf</tt>.
    Note that it is better to configure your aozan.conf file before running Aozan.</p>

 <subsection name="Launching Aozan manually">

 <p>In this case, we can launch Aozan with the following command:</p>

<pre>
$ /usr/local/aozan/aozan.sh /etc/aozan.conf
</pre>

  </subsection>

 <subsection name="Launching aozan as cron job">

 <p>In the following lines, we configure our system to launch Aozan every hour using a script in
   <tt>/etc/cron.daily</tt> (on a Debian/Ubuntu GNU/Linux distribution).</p>

 <pre>
#!/bin/bash

# User to use to launch Aozan
AOZAN_USER=nobody

# Path to Aozan base directory
AOZAN_DIR=/usr/local/aozan

# Path to Aozan data (not data processed by Aozan)
AOZAN_CONF=/etc/aozan.conf

su $AOZAN_USER -c "$AOZAN_DIR/aozan.sh $AOZAN_CONF"
</pre>


 <p>Then we set the permission on the aozan cron script:</p>

<pre>
$ sudo chmod 755 /etc/cron/daily/aozan &amp;&amp; sudo chmod root:root /etc/cron/daily/aozan
</pre>

  </subsection>
</section>

 <section name="Accessing HiSeq Data">

 <p>Aozan can handle several HiSeq instruments. For each instruments you must allow Aozan computer 
 to access to HiSeq output directories. On HiSeq 2000, 2 hard drives are dedicated to each flow cell slot. 
   So you must sharing each hard drive with Aozan computer.</p>

 <subsection name="Enable sharing on HiSeq computer">
   
 <p>First on the HiSeq computer, share the hard drive that contains generated data (usualy F: and G:).
 To do this, open the explorer and right-click on each Hard drive, share... The shares can be in read 
   only mode (recommanded).</p>

 <p><b>Security issues:</b> we recommand to shares HiSeq output directories in read only mode and 
   restrict the shares access to Aozan computer. To do this, you can configure the Windows firewall.</p>

 </subsection>
   
 <subsection name="Mount Windows shares on linux">

 <ul>
   <li>First install the tools for mounting Windows shares (CIFS):</li>
   <pre>
$ sudo apt-get install cifs-utils smbclient
</pre>

 <li>Then, test if you can connect to the share:</li>
 <pre>
$ smbclient -U sbsuser 'smb://hiseq01.example.com/F$'
</pre>

 <li>And now you can add the following lines in /etc/fstab:</li>
 <pre>
//hiseq01.example.com/F$   /mnt/hiseq01_f    cifs    username=sbsuser,password=hiseqpassword       0       0
//hiseq01.example.com/G$   /mnt/hiseq01_g    cifs    username=sbsuser,password=hiseqpassword       0       0
</pre>

 <li>Now create the mount points and process to mounting of the shares:</li>
<pre>
$ sudo mkdir -p /mnt/hiseq01_f /mnt/hiseq01_g &amp;&amp; \
   sudo mount /mnt/hiseq01_f &amp;&amp; \
   sudo mount /mnt/hiseq01_g
</pre>

 <li>You can also use autofs to mount the share. TODO</li>
 </ul>
  </subsection>
</section>

 <section name="Directories requiered by Aozan">

 <p>To work, Aozan need the following directories. The path of this directories must be set in the Aozan
 configuration file.</p>
 
 <table>
   <tr><th>Aozan property</th><th>Sample value</th><th>description</th></tr>
 <tr><td>aozan.var.path</td><td>/var/lib/aozan</td><td>Aozan internal data directory. It contains 
   log files and history of processed runs.</td></tr>
 <tr><td>hiseq.data.path</td><td>/mnt/hiseq1,/mnt/hiseq2</td><td>Hiseq output directories. 
 Multplie values are allowed if there is several HiSeq or 2 output directories for each flow cell of 
   an HiSeq 2000.</td></tr>
 <tr><td>bcl.data.path</td><td>/mnt/storage/bcl</td><td>Hiseq output data after synchronization. Usualy cif files
   are not copied in this directory.</td></tr>
 <tr><td>fastq.data.path</td><td>/mnt/storage/fastq</td><td>Directory for the output of 
   demultiplexing with CASAVA.</td></tr>
 <tr><td>reports.data.path</td><td>/mnt/storage/reports</td><td>Directory for the output of 
   demultiplexing with CASAVA.</td></tr>
 <tr><td>casava.designs.path</td><td>/mnt/storage/casava_designs</td><td>Directory with CASAVA design (real name ???)
   for demultiplexing. If a custom script is used to generate CSV design files, this directory will no be used.</td></tr>
   <tr><td>tmp.path</td><td>/tmp</td><td>Temporary directory.</td></tr>
   
</table>

</section>

 <section name="Aozan configuration">
   
   <subsection name="General configuration">
   </subsection>
   
   <subsection name="Mail configuration">
   </subsection>
   
   <subsection name="Steps configuration">
   </subsection>
   
 </section>
   
 <section name="Steps">

   <subsection name="First base report step">
   </subsection>

   <subsection name="End run discovering step">
   </subsection>
   
   <subsection name="Synchronization step">
   </subsection>   
 
   <subsection name="Demultiplexing step">
   </subsection>
   
   <subsection name="Quality control step">
   </subsection>  
   
 </section>

	</body>
</document>
