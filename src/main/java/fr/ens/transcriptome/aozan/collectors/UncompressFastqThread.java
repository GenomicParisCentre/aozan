/*
 *                  Aozan development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU General Public License version 3 or later 
 * and CeCILL. This should be distributed with the code. If you 
 * do not have a copy, see:
 *
 *      http://www.gnu.org/licenses/gpl-3.0-standalone.html
 *      http://www.cecill.info/licences/Licence_CeCILL_V2-en.html
 *
 * Copyright for this code is held jointly by the Genomic platform
 * of the Institut de Biologie de l'École Normale Supérieure and
 * the individual authors. These should be listed in @author doc
 * comments.
 *
 * For more information on the Aozan project and its aims,
 * or to join the Aozan Google group, visit the home page at:
 *
 *      http://www.transcriptome.ens.fr/aozan
 *
 */

package fr.ens.transcriptome.aozan.collectors;

import static fr.ens.transcriptome.eoulsan.util.StringUtils.toTimeHumanReadable;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.logging.Logger;

import fr.ens.transcriptome.aozan.AozanException;
import fr.ens.transcriptome.aozan.Globals;
import fr.ens.transcriptome.eoulsan.io.CompressionType;
import fr.ens.transcriptome.eoulsan.util.FileUtils;

/**
 * This internal class create a thread for each array of file to uncompress and
 * compile in temporary file.
 * @author Sandrine Perrin
 */
public class UncompressFastqThread extends AbstractFastqProcessThread {

  /** Logger */
  private static final Logger LOGGER = Logger.getLogger(Globals.APP_NAME);

  private static final NumberFormat formatter = new DecimalFormat("#,###");

  private final File[] fastqFiles;
  private final String projectName;
  private final String sampleName;
  private final int lane;
  private final int read;

  private static int countFileDecompressed = 0;
  private static String compression_extension;

  private AozanException exception;
  private boolean success;

  /**
   * Get the exception generated by the call to processSequences in the run()
   * method.
   * @return a exception object or null if no Exception has been thrown
   */
  public Exception getException() {

    return this.exception;
  }

  /**
   * Test if the call to run method was a success
   * @return true if the call to run method was a success
   */
  public boolean isSuccess() {

    return this.success;
  }

  @Override
  public void run() {
    System.out.println("call run uncompress");
    try {
      File f = getFastqFile(fastqFiles, read, lane, projectName, sampleName);

      this.success = (f != null && f.length() > 0);

    } catch (AozanException e) {
      this.exception = e;
    }

  }

  /**
   * Return file uncompressed corresponding on projectName and sampleName if it
   * exist, else it is created
   * @param read read number
   * @param lane lane number
   * @param projectName name of the project
   * @param sampleName name of the sample
   * @param index sequence index
   * @return file
   * @throws AozanException if an error occurs while creating file
   */
  public File getFastqFile(final String casavaOutputPath, final int read,
      final int lane, final String projectName, final String sampleName,
      final String index) throws AozanException {

    // TODO to remove
    // if (!sampleName.endsWith("2012_0051")) {
    // return null;
    // }

    // Set the list of the files for the FASTQ data
    final File[] fastqFiles =
        fastqStorage.createListFastqFiles(casavaOutputPath, read, lane,
            projectName, sampleName, index);

    return getFastqFile(fastqFiles, read, lane, projectName, sampleName);
  }

  /**
   * Uncompresses and compiles files of array.
   * @param fastqFiles fastq files of array
   * @param read read number
   * @param lane lane number
   * @param projectName name of the project
   * @param sampleName name of the sample
   * @param index sequence index
   * @return file compile all files
   * @throws AozanException if an error occurs while creating file
   */
  public File getFastqFile(final File[] fastqFiles, final int read,
      final int lane, final String projectName, final String sampleName)
      throws AozanException {

    if (fastqFiles == null || fastqFiles.length == 0) {
      return null;
    }

    if (fastqStorage.tmpFileExist(fastqFiles))
      // Return uncompress temporary file if it exist
      return fastqStorage.getTemporaryFile(fastqFiles);

    final long startTime = System.currentTimeMillis();
    LOGGER.fine("Start uncompressed fastq Files, size : "
        + formatter.format(fastqFiles[0].length()) + ".");

    // Uncompresses and compiles files of array in new temporary files
    File tmpFastqFile = null;

    try {

      tmpFastqFile =
          File.createTempFile("aozan_fastq_", ".fastq",
              new File(fastqStorage.getTmpDir()));

      OutputStream out = new FileOutputStream(tmpFastqFile);

      for (File fastqFile : fastqFiles) {

        if (!fastqFile.exists()) {
          throw new IOException("Fastq file "
              + fastqFile.getName() + " doesn't exist");
        }

        // Get compression type
        CompressionType zType =
            CompressionType.getCompressionTypeByFilename(fastqFile.getName());

        // Append compressed fastq file to uncompressed file
        final InputStream in = new FileInputStream(fastqFile);
        FileUtils.append(zType.createInputStream(in), out);
      }

      out.close();

    } catch (IOException io) {
      throw new AozanException(io.getMessage());
    }

    // Add in list of temporary fastq files
    fastqStorage.addTemporaryFile(fastqFiles, tmpFastqFile);

    countFileDecompressed++;

    long sizeFile = tmpFastqFile.length();
    // double sizeFile =
    // ((double) tmpFastqFile.length()) / 1024.0 / 1024.0 / 1024.0;
    // sizeFile = ((int) (sizeFile * 10.0)) / 10.0;

    LOGGER
        .fine("End uncompressed for fastq File "
            + tmpFastqFile.getName() + "(size : " + formatter.format(sizeFile)
            + ") in "
            + toTimeHumanReadable(System.currentTimeMillis() - startTime));

    return tmpFastqFile;
  }

  //
  // Getter
  //
  public String getCompressionExtension() {
    return compression_extension;
  }

  //
  // Setter
  //

  public void setCompressionExtension(File file) throws AozanException {

    // String nameFile = file.getName();
    //
    // if (nameFile.indexOf(".fastq") < 0)
    // throw new AozanException("Compression extension unknown.");

    CompressionType zType =
        CompressionType.getCompressionTypeByFilename(file.getName());

    if (zType.equals(CompressionType.NONE))
      throw new AozanException("Compression extension unknown.");

    compression_extension = zType.getExtension();

  }

  //
  // Constructor
  //

  /**
   * Thread constructor.
   * @param fastqFiles fastq files for the sample
   * @param projectName name of the project
   * @param sampleName name of the sample
   * @param lane lane of the sample
   * @param read read of the sample
   * @throws AozanException if an error occurs while creating sequence file for
   *           FastQC
   */
  public UncompressFastqThread(final File[] fastqFiles, final int read,
      final int lane, String projectName, final String sampleName,
      final String keyFiles) throws AozanException {

    super(fastqFiles, read, lane, projectName, sampleName);

    this.fastqFiles = fastqFiles;

    this.projectName = projectName;
    this.sampleName = sampleName;
    this.lane = lane;
    this.read = read;

  }

}
